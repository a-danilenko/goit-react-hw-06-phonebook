{"version":3,"sources":["components/Fade.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactList.module.css","redux/contacts/contacts-action.js","components/Filter/Filter.js","components/ContactForm/index.js","components/ContactsList/index.js","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","uuidv","removeContact","changeFilter","connect","state","value","contacts","filter","dispatch","onChangeFilter","e","target","className","s","filterContainer","filterContainerInput","type","onChange","ContactForm","handleChange","setState","handleSubmit","preventDefault","props","find","item","toLowerCase","toast","error","onSubmit","this","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","contactForm","contactFormLabel","contactFormInput","placeholder","pattern","addButton","onClick","Component","getVisibleContacts","allContacts","contactFilter","normalizedFilter","includes","onRemoveContact","contactActions","TransitionGroup","component","length","map","CSSTransition","timeout","classNames","Fade","contactItem","deleteButton","in","appear","onAddContact","ContactsList","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","commonStore","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24012cde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"Fade_appear__k6eQq\",\"appearActive\":\"Fade_appearActive__3T1ce\",\"enter\":\"Fade_enter__1-ve-\",\"enterActive\":\"Fade_enterActive__2irAQ\",\"exit\":\"Fade_exit__3j7sl\",\"exitActive\":\"Fade_exitActive__2h4L-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__3Uo_U\",\"filterContainerInput\":\"Filter_filterContainerInput__1HxtO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3TkU-\",\"contactItem\":\"ContactList_contactItem__2Lz-7\",\"deleteButton\":\"ContactList_deleteButton__15cuG\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: uuidv(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction('contacts/remove');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst contactsActions = {\r\n  addContact,\r\n  removeContact,\r\n  changeFilter,\r\n};\r\n\r\nexport default contactsActions;","import PropTypes from \"prop-types\";\r\nimport s from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-action';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <div className={s.filterContainer}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.filterContainerInput}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </div>\r\n  );\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n  contacts: state.contacts.contacts,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeFilter: e => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport contactsActions from '../../redux/contacts/contacts-action';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    contacts: PropTypes.array,\r\n    onSubmit: PropTypes.func,\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { name, number } = this.state;\r\n    const notify = () => toast.error(`${name} is already in contacts`);\r\n    const notEmpty = () => toast.error('the field \"name & number\" must not be empty!');\r\n\r\n    e.preventDefault();\r\n\r\n    if (name === '' || number === '') {\r\n      notEmpty();\r\n      return;\r\n    }\r\n\r\n    if (this.props.contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())) {\r\n      notify();\r\n      return;\r\n    }\r\n    \r\n    this.props.onSubmit(name, number);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div>\r\n        <ToastContainer\r\n          position=\"top-center\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n        <form className={s.contactForm} onSubmit={this.handleSubmit}>\r\n          <label className={s.contactFormLabel}>\r\n            Name\r\n            <input\r\n              className={s.contactFormInput}\r\n              type='text'\r\n              name='name'\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Name\"\r\n            />\r\n          </label>\r\n          <label className={s.contactFormLabel}>\r\n            Number\r\n            <input\r\n              className={s.contactFormInput}\r\n              type='text'\r\n              name='number'\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              placeholder='xxx-xxx-xxx'\r\n              pattern=\"^[0-9- ]*$\"\r\n            />\r\n          </label>\r\n          <button className={s.addButton} onClick={this.handleSubmit}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from \"prop-types\";\r\nimport s from './ContactList.module.css';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Fade from '../Fade.module.css';\r\nimport contactActions from '../../redux/contacts/contacts-action';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n  <TransitionGroup component='ul'>\r\n    {contacts && contacts.length > 0 && contacts.map(({ id, name, number }) =>\r\n      <CSSTransition\r\n        key={id}\r\n        timeout={500}\r\n        classNames={Fade}\r\n      >\r\n        <li className={s.contactItem} key={id}>\r\n          {`${name} : ${number}`}\r\n          {\r\n            <button\r\n              className={s.deleteButton}\r\n              type='button'\r\n              name='delete'\r\n              onClick={() => onRemoveContact(id)}\r\n            >\r\n              delete contact\r\n            </button>\r\n          }\r\n        </li>\r\n      </CSSTransition>\r\n    )}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n}\r\n\r\nconst getVisibleContacts = (allContacts, contactFilter) => {\r\n  const normalizedFilter = contactFilter.toLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = ({ contacts }) => ({\r\n  contacts: getVisibleContacts(contacts.contacts, contacts.filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemoveContact: id => dispatch(contactActions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import Filter from './components/Filter/Filter';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactsList from './components/ContactsList';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Fade from './components/Fade.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from './redux/contacts/contacts-action';\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <>\r\n      <CSSTransition\r\n        in\r\n        appear={true}\r\n        timeout={500}\r\n        classNames={Fade}\r\n      >\r\n        <h1>Phonebook</h1>\r\n      </CSSTransition>\r\n      <ContactForm onAddContact={props.addContact} />\r\n      <h2>Contacts</h2>\r\n      <Filter  />\r\n      {props.contacts && props.contacts.length > 0 && <ContactsList />} \r\n    </>\r\n  );\r\n  }\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.contacts,\r\n})\r\n\r\nconst mapDispatchToProps = () => ({\r\n  addContact: contactsActions.addContact,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-action';\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter\r\n})\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; \r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reduser';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n})\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst commonStore = {\r\n  store,\r\n  persistor,\r\n};\r\n\r\nexport default commonStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <Provider store={store.store}>\r\n    <PersistGate persistor={store.persistor}>\r\n      <App/>  \r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__efvZa\",\"contactFormLabel\":\"ContactForm_contactFormLabel__1-4zo\",\"contactFormInput\":\"ContactForm_contactFormInput__vqYBk\",\"addButton\":\"ContactForm_addButton__MZ2vK\"};"],"sourceRoot":""}